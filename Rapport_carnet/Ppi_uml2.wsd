@startuml
class MpiRunner [[java:org.sar.ppi.mpi.MpiRunner]] {
	+void run(Class<? extends NodeProcess> pClass, int nbProcs, String scenario)
}
interface Runner [[java:org.sar.ppi.Runner]] {
}
Runner <|.. MpiRunner
class MpiSubRunner [[java:org.sar.ppi.mpi.MpiSubRunner]] {
	+void run(Class<? extends NodeProcess> pClass, int nbProcs, String scenario)
}
interface Runner [[java:org.sar.ppi.Runner]] {
}
Runner <|.. MpiSubRunner
class PeerSimInit [[java:org.sar.ppi.peersim.PeerSimInit]] {
	-{static}String PAR_PROTO
	+{static}String PAR_SEED
	-int infrapid
	+PeerSimInit(String prefix)
	+boolean execute()
}
interface Control [[java:javax.sound.sampled.Control]] {
}
Control <|.. PeerSimInit
class PeerSimRunner [[java:org.sar.ppi.peersim.PeerSimRunner]] {
	+void run(Class<? extends NodeProcess> pClass, int nbProcs, String scenario)
}
interface Runner [[java:org.sar.ppi.Runner]] {
}
Runner <|.. PeerSimRunner
class Ppi [[java:org.sar.ppi.Ppi]] {
	+{static}ClassLoader loader
	+{static}void main(String[] args)
	+{static}void main(Class<? extends NodeProcess> pClass, Runner runner, int nbProcs, String scenario)
}
interface Runner [[java:org.sar.ppi.Runner]] {
	void run(Class<? extends NodeProcess> pClass, int nbProcs, String scenario)
}
@enduml